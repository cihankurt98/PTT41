<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="MAIN" Id="{a4f99ad4-3d99-4cc3-aec6-4b8f25d45e95}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	Timer1 :TON;
	Timer2 : TON;
	PulseTimer1 : TP;

	CurrentState  : States;
	
	ServoRTrigY : R_Trig ; 
	ServoRTrigX : R_Trig ; 
	
	//Eigen trigger booleans
	InitYReady : BOOL;
	InitXReady : BOOL;
	droppingDown : BOOL; //test
	
	TimerTest1 : TIME;
	TimerResult : TIME;
	
	Move_Arm : MoveArm;
	Count_Free_Spaces : CountFreeSpaces;
	Find_Free : FindFree;
	
	PalletArray: ARRAY [1..25] OF BOOL := [25(FALSE)];
	
	DrinkArray: ARRAY [1..25] OF Drinks := [13(Drinks.Cola), 12(Drinks.Fanta)]; 
	FreeCola : INT;
	FreeFanta : INT;
	
	//messages voor Nicky & Jens
	BottleAvailable : BOOL;
	CorrectDelivery : BOOL;
	NoCover : BOOL;
	NoBottle : BOOL;
	WrongDrink : BOOL;
	ColaFanta: INT;
	
	//Settings
	StartPos : INT;
	ErrorPos: INT;
	CurrentPos : INT;
	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[PulseTimer1(IN:=GVL_IO.Start_button, PT:=T#150MS);
Timer1(IN:= GVL_IO.a_1_Vertical_Zaxis_downward, PT:= T#10MS);
Timer2(IN:=droppingDown AND NOT GVL_IO.a_1_Vertical_Zaxis_downward, PT:=T#280MS);

CASE CurrentState OF
States.Init:
		//Aanzetten van servo's. Dit kan even duren GEEN HOMING
		GVL_IO.SVONX_SERVO_ON_tableX 	  := TRUE; 
		GVL_IO.SVONY_SERVO_ON_translY 	  := TRUE;
		
		GVL_IO.SETUPX_ORIGIN_tableX := PulseTimer1.Q;
		GVL_IO.SETUPY_ORIGIN_translY := PulseTimer1.Q;
		
		//// Koppelen van outputs Busy aan var's. Triggered op een falling edge.
		IF PulseTimer1.Q THEN
			ServoRTrigX ( clk := gvl_io.SETONX_ORIGIN_tableX ); 
	  		ServoRTrigY ( clk := gvl_io.SETONY_ORIGIN_translationY );
		END_IF
		
		// Bools setten aan de hand van triggers.
		IF ServoRTrigX.Q THEN
			InitXReady:= TRUE;
		END_IF
		
		IF ServoRTrigY.Q THEN
			InitYReady:= TRUE;
		END_IF
		
		// Init voltooid ga naar idle
		IF InitXReady AND InitYReady THEN
			CurrentPos:= 1;
			NoCover := FALSE;
			NoBottle := FALSE;
			WrongDrink:= FALSE;
			CorrectDelivery := FALSE;
			ErrorPos:= 666;
			StartPos:= 30;
			ColaFanta := drinks.Cola;
			CurrentState:= States.Idle;
		END_IF
		
States.Idle:
		//=========================TEST=================================
		IF NOT GVL_IO.Stop_button THEN
			BottleAvailable := TRUE;
		END_IF
		//==============================================================
		CorrectDelivery := FALSE;
		Count_Free_Spaces(DrinkArray:=DrinkArray, PalletArray:= PalletArray);
		FreeCola := Count_Free_Spaces.FreeCola;
		FreeFanta := Count_Free_Spaces.FreeFanta;
		IF BottleAvailable AND GVL_IO.dp1_Can_detection AND GVL_IO.dp2_Cover_detection THEN
			Find_Free(DrinkArray:=DrinkArray, PalletArray:= PalletArray, TempDrink:= ColaFanta, ErrorPosition:=ErrorPos);
			CurrentPos := Find_Free.FreePosition;
			IF CurrentPos = ErrorPos THEN
				WrongDrink := TRUE;
				CurrentState := States.ManualCheck;
			ELSE
				CorrectDelivery := TRUE;
				NoCover := FALSE;
				NoBottle := FALSE;
				CurrentState := States.MoveToPickUp;
			END_IF
		ELSIF BottleAvailable AND NOT GVL_IO.dp1_Can_detection THEN
			NoBottle := TRUE;
		ELSIF BottleAvailable AND NOT GVL_IO.dp2_Cover_detection THEN
			NoCover := TRUE;
		END_IF
		BottleAvailable := FALSE;
		
States.MoveToPickUp:
		Move_Arm(Position:= StartPos);
		IF Move_Arm.OnNewLocation THEN
			CurrentState := States.PickUpDown;
		END_IF
		
States.PickUpDown:
		IF GVL_IO.a_0_Vertical_Zaxis_upward THEN
			GVL_IO.Aplus_Vert_axis_downwards := TRUE;
		END_IF
		
		IF GVL_IO.a_1_Vertical_Zaxis_downward THEN
			GVL_IO.Vplus_Vacuum_start := TRUE;
			
			IF Timer1.Q THEN
			CurrentState := States.PickUpUp;
			END_IF
		END_IF

States.PickUpUp:
		GVL_IO.Aplus_Vert_axis_downwards := FALSE;
		
		IF GVL_IO.a_0_Vertical_Zaxis_upward THEN
			CurrentState := States.Moving;
		END_IF
		
States.Moving:
		IF GVL_IO.a_0_Vertical_Zaxis_upward THEN
			Move_Arm(Position:= CurrentPos);
			IF Move_Arm.OnNewLocation THEN
				PalletArray[CurrentPos] := TRUE;
				CurrentState := States.DropDown;
			END_IF
		END_IF
		
States.DropDown:
		IF GVL_IO.a_0_Vertical_Zaxis_upward THEN
			GVL_IO.Aplus_Vert_axis_downwards := TRUE;
			droppingDown := TRUE;
			TimerTest1 := TIME();
		END_IF
		
		
		IF 	GVL_IO.a_1_Vertical_Zaxis_downward THEN
			GVL_IO.Vplus_Vacuum_start := FALSE;
			IF Timer1.Q THEN
				TimerResult := TIME() - TimerTest1;
				droppingDown := FALSE;
				CurrentState := States.DropUp;
			END_IF
			
		ELSE IF Timer2.Q  THEN
		GVL_io.Aplus_Vert_axis_downwards := FALSE;
		droppingDown := FALSE;
		CurrentState := States.ManualCheck;
		END_IF
		END_IF

States.DropUp:
		IF GVL_IO.a_1_Vertical_Zaxis_downward THEN
			GVL_IO.Aplus_Vert_axis_downwards := FALSE;
		END_IF
		
		IF GVL_IO.a_0_Vertical_Zaxis_upward THEN
			CurrentState := States.Idle;
		END_IF
		
States.ManualCheck:
		GVL_IO.BR_Alarm_light := TRUE;
		GVL_io.Vplus_Vacuum_start := FALSE;
		IF GVL_IO.Reset_button THEN
			GVL_IO.BR_Alarm_light := FALSE;
			WrongDrink := FALSE;
			Currentstate := States.Idle;
		END_IF
END_CASE	]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="860" Count="0" />
      <LineId Id="863" Count="0" />
      <LineId Id="1124" Count="0" />
      <LineId Id="864" Count="27" />
      <LineId Id="1290" Count="1" />
      <LineId Id="1376" Count="1" />
      <LineId Id="1374" Count="1" />
      <LineId Id="1302" Count="0" />
      <LineId Id="1035" Count="0" />
      <LineId Id="892" Count="1" />
      <LineId Id="1103" Count="0" />
      <LineId Id="1292" Count="1" />
      <LineId Id="1295" Count="1" />
      <LineId Id="1294" Count="0" />
      <LineId Id="1363" Count="0" />
      <LineId Id="1267" Count="1" />
      <LineId Id="1266" Count="0" />
      <LineId Id="1286" Count="0" />
      <LineId Id="1304" Count="1" />
      <LineId Id="1346" Count="0" />
      <LineId Id="1357" Count="0" />
      <LineId Id="1349" Count="0" />
      <LineId Id="1351" Count="0" />
      <LineId Id="1362" Count="0" />
      <LineId Id="1353" Count="1" />
      <LineId Id="1352" Count="0" />
      <LineId Id="1350" Count="0" />
      <LineId Id="1365" Count="1" />
      <LineId Id="895" Count="1" />
      <LineId Id="1281" Count="0" />
      <LineId Id="1364" Count="0" />
      <LineId Id="907" Count="1" />
      <LineId Id="1224" Count="0" />
      <LineId Id="1226" Count="1" />
      <LineId Id="1225" Count="0" />
      <LineId Id="1070" Count="0" />
      <LineId Id="942" Count="20" />
      <LineId Id="1171" Count="0" />
      <LineId Id="1159" Count="3" />
      <LineId Id="1157" Count="0" />
      <LineId Id="1176" Count="0" />
      <LineId Id="967" Count="1" />
      <LineId Id="1093" Count="0" />
      <LineId Id="970" Count="0" />
      <LineId Id="1154" Count="1" />
      <LineId Id="1092" Count="0" />
      <LineId Id="1111" Count="0" />
      <LineId Id="972" Count="2" />
      <LineId Id="976" Count="0" />
      <LineId Id="1146" Count="0" />
      <LineId Id="1207" Count="0" />
      <LineId Id="977" Count="1" />
      <LineId Id="1202" Count="0" />
      <LineId Id="1164" Count="2" />
      <LineId Id="1203" Count="2" />
      <LineId Id="981" Count="1" />
      <LineId Id="1095" Count="0" />
      <LineId Id="984" Count="0" />
      <LineId Id="1094" Count="0" />
      <LineId Id="986" Count="3" />
      <LineId Id="1036" Count="2" />
      <LineId Id="1177" Count="0" />
      <LineId Id="1039" Count="1" />
      <LineId Id="1358" Count="0" />
      <LineId Id="1042" Count="0" />
      <LineId Id="1041" Count="0" />
      <LineId Id="641" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>